#!/usr/bin/env node

/**
 * Setup Script for AI Customer Support Chatbot
 * Helps users configure the application for first-time use
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

class SetupWizard {
    constructor() {
        this.rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
    }

    async run() {
        console.log('üöÄ AI Customer Support Chatbot Setup Wizard');
        console.log('='.repeat(50));
        console.log('This wizard will help you configure your chatbot for first-time use.\n');

        try {
            await this.checkPrerequisites();
            await this.setupEnvironment();
            await this.initializeKnowledgeBase();
            await this.validateSetup();
            
            console.log('\nüéâ Setup completed successfully!');
            console.log('\nNext steps:');
            console.log('1. Start development server: npm run dev');
            console.log('2. Open http://localhost:3000 in your browser');
            console.log('3. Test the chat interface');
            console.log('4. Add knowledge entries via admin interface');
            console.log('\nFor deployment instructions, see DEPLOYMENT.md');

        } catch (error) {
            console.error('\n‚ùå Setup failed:', error.message);
            process.exit(1);
        } finally {
            this.rl.close();
        }
    }

    async checkPrerequisites() {
        console.log('üìã Checking prerequisites...\n');

        // Check Node.js version
        const nodeVersion = process.version;
        const majorVersion = parseInt(nodeVersion.slice(1).split('.')[0]);
        
        if (majorVersion < 18) {
            throw new Error(`Node.js 18+ required. Current version: ${nodeVersion}`);
        }
        console.log(`‚úÖ Node.js ${nodeVersion} (compatible)`);

        // Check npm
        try {
            const { execSync } = require('child_process');
            const npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();
            console.log(`‚úÖ npm ${npmVersion}`);
        } catch (error) {
            throw new Error('npm not found. Please install Node.js with npm.');
        }

        // Check if dependencies are installed
        if (!fs.existsSync('node_modules')) {
            console.log('üì¶ Installing dependencies...');
            try {
                const { execSync } = require('child_process');
                execSync('npm install', { stdio: 'inherit' });
                console.log('‚úÖ Dependencies installed');
            } catch (error) {
                throw new Error('Failed to install dependencies. Please run "npm install" manually.');
            }
        } else {
            console.log('‚úÖ Dependencies already installed');
        }

        console.log('');
    }

    async setupEnvironment() {
        console.log('üîß Setting up environment configuration...\n');

        const envPath = '.env.local';
        const envExamplePath = '.env.local.example';

        // Check if .env.local already exists
        if (fs.existsSync(envPath)) {
            const overwrite = await this.askQuestion('‚ö†Ô∏è  .env.local already exists. Overwrite? (y/N): ');
            if (!overwrite.toLowerCase().startsWith('y')) {
                console.log('‚úÖ Using existing .env.local');
                return;
            }
        }

        // Get Gemini API key
        console.log('üîë Google Gemini API Key Setup');
        console.log('You need a Google Gemini API key to use the AI features.');
        console.log('Get one from: https://makersuite.google.com/app/apikey\n');

        const apiKey = await this.askQuestion('Enter your Gemini API key: ');
        
        if (!apiKey || apiKey.trim() === '') {
            throw new Error('Gemini API key is required');
        }

        if (!apiKey.startsWith('AIza')) {
            const proceed = await this.askQuestion('‚ö†Ô∏è  API key format looks unusual. Continue anyway? (y/N): ');
            if (!proceed.toLowerCase().startsWith('y')) {
                throw new Error('Setup cancelled');
            }
        }

        // Create .env.local file
        const envContent = `# AI Customer Support Chatbot - Environment Configuration
# Generated by setup wizard on ${new Date().toISOString()}

# Google Gemini API Configuration
GEMINI_API_KEY=${apiKey.trim()}

# Environment Mode
NODE_ENV=development

# Optional: Enable debug logging
# DEBUG=true
`;

        fs.writeFileSync(envPath, envContent);
        console.log('‚úÖ Environment configuration created');
        console.log('');
    }

    async initializeKnowledgeBase() {
        console.log('üìö Initializing knowledge base...\n');

        const dataDir = 'data';
        const kbPath = path.join(dataDir, 'knowledge-base.json');

        // Ensure data directory exists
        if (!fs.existsSync(dataDir)) {
            fs.mkdirSync(dataDir, { recursive: true });
            console.log('üìÅ Created data directory');
        }

        // Check if knowledge base already exists
        if (fs.existsSync(kbPath)) {
            try {
                const existing = JSON.parse(fs.readFileSync(kbPath, 'utf8'));
                const entryCount = Array.isArray(existing) ? existing.length : (existing.entries ? existing.entries.length : 0);
                console.log(`‚úÖ Knowledge base exists (${entryCount} entries)`);
                return;
            } catch (error) {
                console.log('‚ö†Ô∏è  Existing knowledge base is corrupted, recreating...');
            }
        }

        // Create sample knowledge base
        const sampleKB = {
            entries: [
                {
                    id: this.generateId(),
                    key: "Company Overview",
                    value: "We are a modern architectural firm specializing in residential and commercial design. Our team combines innovative design with sustainable practices to create spaces that inspire and function beautifully.",
                    tags: ["company", "overview", "services"],
                    createdAt: new Date().toISOString(),
                    updatedAt: new Date().toISOString()
                },
                {
                    id: this.generateId(),
                    key: "Service Pricing",
                    value: "Our architectural services start at $150/hour for residential projects and $200/hour for commercial projects. We offer comprehensive design packages starting at $5,000 for complete home designs.",
                    tags: ["pricing", "services", "residential", "commercial"],
                    createdAt: new Date().toISOString(),
                    updatedAt: new Date().toISOString()
                },
                {
                    id: this.generateId(),
                    key: "Contact Information",
                    value: "You can reach us at info@yourarchfirm.com or call us at (555) 123-4567. Our office is open Monday-Friday, 9 AM to 6 PM. We're located in downtown and offer both in-person and virtual consultations.",
                    tags: ["contact", "hours", "location"],
                    createdAt: new Date().toISOString(),
                    updatedAt: new Date().toISOString()
                }
            ],
            lastUpdated: new Date().toISOString(),
            version: "1.0"
        };

        fs.writeFileSync(kbPath, JSON.stringify(sampleKB, null, 2));
        console.log('‚úÖ Knowledge base initialized with sample data');
        console.log(`üìä Created ${sampleKB.entries.length} sample entries`);
        console.log('');
    }

    async validateSetup() {
        console.log('üîç Validating setup...\n');

        // Check environment file
        if (!fs.existsSync('.env.local')) {
            throw new Error('Environment file not found');
        }
        console.log('‚úÖ Environment file exists');

        // Check knowledge base
        const kbPath = 'data/knowledge-base.json';
        if (!fs.existsSync(kbPath)) {
            throw new Error('Knowledge base file not found');
        }

        try {
            const kb = JSON.parse(fs.readFileSync(kbPath, 'utf8'));
            const entryCount = Array.isArray(kb) ? kb.length : (kb.entries ? kb.entries.length : 0);
            console.log(`‚úÖ Knowledge base valid (${entryCount} entries)`);
        } catch (error) {
            throw new Error('Knowledge base file is corrupted');
        }

        // Test API key format
        const envContent = fs.readFileSync('.env.local', 'utf8');
        const apiKeyMatch = envContent.match(/GEMINI_API_KEY=(.+)/);
        if (!apiKeyMatch || !apiKeyMatch[1]) {
            throw new Error('Gemini API key not found in environment file');
        }
        console.log('‚úÖ API key configured');

        console.log('');
    }

    generateId() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2);
    }

    askQuestion(question) {
        return new Promise((resolve) => {
            this.rl.question(question, (answer) => {
                resolve(answer);
            });
        });
    }
}

// Run setup wizard
const wizard = new SetupWizard();
wizard.run().catch(error => {
    console.error('Setup failed:', error);
    process.exit(1);
});